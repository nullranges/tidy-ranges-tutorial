[["tissue-specific-promoter-marks.html", "Chapter 3 Tissue-specific promoter marks", " Chapter 3 Tissue-specific promoter marks Objective: determine if tissue-specific promoter marks (e.g. H3K27ac) are often near genes that are expressed in a tissue-specific manner. We will load expression data from the GTEx project (Lonsdale and others 2013), which gives median expression in TPM for each tissue. We will use H3K27ac ChIP-seq data from the ENCODE project (Dunham and others 2012). library(tidyr) file &lt;- &quot;data/GTEx_Analysis_2017-06-05_v8_RNASeQCv1.1.9_gene_median_tpm.gct.gz&quot; gtex &lt;- read.delim(file, skip=2) We select two tissues, bladder and kidney, and convert the data from a wide format into a tidy format. tissues &lt;- gtex %&gt;% dplyr::select(Name, Bladder, Kidney...Cortex) %&gt;% dplyr::rename(gene = Name, Kidney = Kidney...Cortex) %&gt;% dplyr::mutate(gene = sub(&quot;\\\\..*&quot;,&quot;&quot;,gene)) %&gt;% pivot_longer(!gene, names_to=&quot;tissue&quot;, values_to=&quot;tpm&quot;) Now define two vectors of genes that are specific to bladder and kidney: bladder_expr &lt;- tissues %&gt;% dplyr::filter(tissue == &quot;Bladder&quot; &amp; tpm &gt; 10) %&gt;% dplyr::pull(gene) kidney_expr &lt;- tissues %&gt;% dplyr::filter(tissue == &quot;Kidney&quot; &amp; tpm &gt; 10) %&gt;% dplyr::pull(gene) int &lt;- intersect(bladder_expr, kidney_expr) bladder_expr &lt;- setdiff(bladder_expr, int) kidney_expr &lt;- setdiff(kidney_expr, int) Next, use an existing TxDb to locate these genes in the genomes. While we usually recommend to use GENCODE genes for human analysis, because the ENCODE chromatin modification peak files on AnnotationHub are in hg19, we use the UCSC hg19 genes here for simplicity of the code: library(TxDb.Hsapiens.UCSC.hg19.knownGene) library(org.Hs.eg.db) Add the ENSEMBL ID and pull out the two tissue-specific sets. g &lt;- genes(TxDb.Hsapiens.UCSC.hg19.knownGene) ## 403 genes were dropped because they have exons located on both strands of the same ## reference sequence or on more than one reference sequence, so cannot be represented by a ## single genomic range. ## Use &#39;single.strand.genes.only=FALSE&#39; to get all the genes in a GRangesList object, or use ## suppressMessages() to suppress this message. library(plyranges) g &lt;- g %&gt;% mutate(ensembl = mapIds(org.Hs.eg.db, gene_id, &quot;ENSEMBL&quot;, &quot;ENTREZID&quot;)) bladder_g &lt;- g %&gt;% filter(ensembl %in% bladder_expr) kidney_g &lt;- g %&gt;% filter(ensembl %in% kidney_expr) Finally we combine the two sets with bind_ranges, and we change the feature size from the whole gene extent (the range from the leftmost exon to rightmost exon), to just the TSS, using anchor_5p and mutate. tss &lt;- bind_ranges(bladder=bladder_g, kidney=kidney_g, .id=&quot;gtissue&quot;) %&gt;% anchor_5p() %&gt;% mutate(width=1) Now we will obtain the H3K27ac peak sets: library(AnnotationHub) ah &lt;- AnnotationHub() # query(ah, c(&quot;Homo sapiens&quot;, &quot;bladder&quot;, &quot;H3K27ac&quot;, &quot;narrowPeak&quot;)) bladder_pks &lt;- ah[[&quot;AH44180&quot;]] # query(ah, c(&quot;Homo sapiens&quot;, &quot;kidney&quot;, &quot;H3K27ac&quot;, &quot;narrowPeak&quot;)) kidney_pks &lt;- ah[[&quot;AH43443&quot;]] save(bladder_pks, kidney_pks, file=&quot;data/peaks.rda&quot;) We download these and scale so they have the same 90% quantile of signalValue. ninety &lt;- function(x) quantile(x, .9, names=FALSE) bladder_pks &lt;- bladder_pks %&gt;% mutate(signal = signalValue / ninety(signalValue)) kidney_pks &lt;- kidney_pks %&gt;% mutate(signal = signalValue / ninety(signalValue)) Combine the peaks from bladder and kidney, filter to those with &lt; 0.1% FDR, and center the peak on the summit (the peak column gives the shift from the left side to the summit). pks &lt;- bind_ranges(bladder=bladder_pks, kidney=kidney_pks, .id=&quot;ptissue&quot;) %&gt;% filter(qValue &gt; 3, width &lt;= 1000) %&gt;% mutate(start = start + peak) %&gt;% select(-peak) %&gt;% mutate(width = 1) Finally, once we have two tidy range sets, we can perform the analysis by a join, followed by two lines that take care of multiple overlaps, followed by two lines that give us our tallies of interest. It appears that tissue-specific peaks are enriched near the tissue-specific genes for both bladder and kidney. tss %&gt;% join_overlap_left(pks, maxgap=500) %&gt;% group_by(ptissue) %&gt;% # within peak tissue... filter(!duplicated(gene_id)) %&gt;% # ...just take the first overlap per gene group_by(gtissue, ptissue) %&gt;% summarize(count = n()) ## DataFrame with 6 rows and 3 columns ## gtissue ptissue count ## &lt;Rle&gt; &lt;character&gt; &lt;integer&gt; ## 1 bladder bladder 2175 ## 2 bladder kidney 1578 ## 3 bladder NA 862 ## 4 kidney bladder 103 ## 5 kidney kidney 207 ## 6 kidney NA 243 The above number could also be found with four countOverlaps calls, by considering all four pairs of overlaps of the two sets of genes and peaks. If we want more information per gene, e.g. suppose we want to compute the average signal per gene of peaks nearby, we need to group twice, once also by gene ID, and the second time integrating over gene ID. While here we add a few more lines of code, performing such an operation with base Bioconductor functions would require adding code to perform the loops, adding many intermediate variables to store results, etc. tss %&gt;% join_overlap_left(pks, maxgap=500) %&gt;% group_by(gtissue, ptissue, gene_id) %&gt;% # need per gene stats summarize(num_overlaps = n(), signal = mean(signal)) %&gt;% as_tibble() %&gt;% # DataFrame to tibble for further processing group_by(gtissue, ptissue) %&gt;% summarize(sum_any_overlaps = sum(num_overlaps &gt; 0), mean_signal=mean(signal)) ## `summarise()` has grouped output by &#39;gtissue&#39;. You can override using the `.groups` argument. ## # A tibble: 6 × 4 ## # Groups: gtissue [2] ## gtissue ptissue sum_any_overlaps mean_signal ## &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; ## 1 bladder bladder 2175 1.18 ## 2 bladder kidney 1578 0.929 ## 3 bladder &lt;NA&gt; 862 NA ## 4 kidney bladder 103 0.991 ## 5 kidney kidney 207 0.709 ## 6 kidney &lt;NA&gt; 243 NA What’s wrong with this analysis? We didn’t figure out the expressed promoter, we just looked at the left or rightmost isoform (for + or - strand genes, respectively). References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
