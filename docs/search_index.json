[["index.html", "Tidy Ranges Tutorial About", " Tidy Ranges Tutorial nullranges devel team 2021-11-09 About We provide examples of computing operations on genomic ranges using the tidy data philosophy. These examples focus on the packages dplyr, plyranges, nullranges, and excluderanges. "],["join-is-an-overlap.html", "Chapter 1 Join is an overlap", " Chapter 1 Join is an overlap Objective: learn that a “join” is like an overlap. We start with a quick example explaining why we use functions called join. library(dplyr) library(tidyr) library(randomNames) Let’s set up a simulation where we have 17 classmates (not counting ourselves) in a school of 118. Suppose every member of the class has 12 friends outside of class. We want to find out, for each classmate, how many friends we have in common and also, of our shared friends, what is a typical birthday. Let’s define typical as the median birthday of our shared friends. m &lt;- 17 # size of class n &lt;- 100 # size of others in school nf &lt;- 12 # number of friends outside class set.seed(5) people &lt;- randomNames(m + n, name.order=&quot;first.last&quot;, name.sep=&quot; &quot;) We define the population of potential friends (those outside the class) as pop, and our 12 friends are in friends. Finally, we define the people that are in our class as class_people. pop &lt;- data.frame(person=people[-(1:m)], birthday=sample(31, n, TRUE)) friends &lt;- data.frame(friend=sample(people, nf)) class_people &lt;- people[1:m] The following sets up a data.frame, where each row gives, for a given classmate, their friends, and the friends’ birthdays. loop &lt;- rep(1:m, each=nf) idx &lt;- as.vector(replicate(m, sample(n, nf))) class &lt;- data.frame(classmate=class_people[loop], friend=pop$person[idx], birthday=pop$birthday[idx]) Sort this by classmate alphabetically, and make classmate into a factor. This last step is important, as it will help us to keep track of the classmates for whom we share no friends outside of class. class &lt;- class %&gt;% arrange(classmate) %&gt;% mutate(classmate=factor(classmate)) We perform an inner_join by \"friend\". This just means we look for classmates where we have overlapping friends, and we drop the rows where we don’t share any friends. “Inner” refers to the fact that we are keeping the overlap in the inside of two intersecting circles. Note that the join operation brings along the metadata (extra data) about the friends’ birthdays. shared_friends &lt;- friends %&gt;% inner_join(class, by=&quot;friend&quot;) %&gt;% arrange(classmate, friend) %&gt;% relocate(classmate) # classmate to 1st column shared_friends ## classmate friend birthday ## 1 Brandon Jones Christopher Rivera 13 ## 2 Brandon Jones Jose Jimenez 26 ## 3 Brandon Jones Maria Hernandez 15 ## 4 Brandon Jones Tuli Hoang 7 ## 5 Christopher Herron Tuli Hoang 7 ## 6 Christopher Herron William Steinbach 15 ## 7 Haley Polhamus Cellene Millhone 23 ## 8 Haley Polhamus William Steinbach 15 ## 9 Juan Villegas Cabrera Alyssa Kinanee 30 ## 10 Juan Villegas Cabrera Malik Gammon 5 ## 11 Juan Villegas Cabrera Tajhae Bohanna 31 ## 12 Maisara el-Arshad Kaylyn Judkins 2 ## 13 Maisara el-Arshad Maria Hernandez 15 ## 14 Maisara el-Arshad Tajhae Bohanna 31 ## 15 Michael Mcgill Christopher Rivera 13 ## 16 Michael Mcgill Maria Hernandez 15 ## 17 Noah Pettinger Kaylyn Judkins 2 ## 18 Noah Pettinger Tajhae Bohanna 31 ## 19 Orion Villani Malik Gammon 5 ## 20 Shane Ranaldi Alyssa Kinanee 30 ## 21 Shane Ranaldi William Steinbach 15 ## 22 Stephanie Hernandez Asmaa el-Abdelnour 29 ## 23 Zachary Roe-Huffman Maria Hernandez 15 Lastly, we perform some summarization: compute the number of friends in common with n() and the median birthday of shared friends. The complete() command at the end fills in 0 for those classmates for whom we share no friends (here, the factor() command earlier becomes relevant). shared_friends %&gt;% group_by(classmate) %&gt;% summarize(in_common=n(), median_bday=median(birthday)) %&gt;% complete(classmate, fill=list(count=0)) ## # A tibble: 17 × 3 ## classmate in_common median_bday ## &lt;fct&gt; &lt;int&gt; &lt;dbl&gt; ## 1 Aaliyah Minter NA NA ## 2 Brandon Jones 4 14 ## 3 Christopher Herron 2 11 ## 4 Collin Leon NA NA ## 5 Haley Polhamus 2 19 ## 6 Juan Villegas Cabrera 3 30 ## 7 Khaalid el-Ammar NA NA ## 8 Kianna Mcalevy NA NA ## 9 Maazin al-Ismael NA NA ## 10 Maisara el-Arshad 3 15 ## 11 Michael Mcgill 2 14 ## 12 Noah Pettinger 2 16.5 ## 13 Orion Villani 1 5 ## 14 Shane Ranaldi 2 22.5 ## 15 Stephanie Hernandez 1 29 ## 16 Xavier Urueta NA NA ## 17 Zachary Roe-Huffman 1 15 "],["overlap-granges-with-plyranges.html", "Chapter 2 Overlap GRanges with plyranges", " Chapter 2 Overlap GRanges with plyranges Objective: compute overlaps and summary statistics between two sets of genomic ranges. In particular, suppose we want to compute the mean genomic extent of genes in a set of query ranges. We move on from the classroom example by seeing how we compute overlaps when the features are in genomic space. We will use GRanges in the Bioconductor package GenomicRanges to represent the features and plyranges to compute the overlaps, similarly to how we used dplyr to compute the overlaps in the previous analysis. So data.frame is to dplyr as GRanges is to plyranges. library(plyranges) Note the structure of the GRanges object: r &lt;- GRanges(&quot;chr1&quot;, IRanges(1 + c(34e6,36e6,36.6e6), width=c(2e5,2e5,1e5)), strand=c(&quot;+&quot;,&quot;-&quot;,&quot;-&quot;), range_id=factor(c(&quot;foo&quot;,&quot;bar&quot;,&quot;boo&quot;))) r ## GRanges object with 3 ranges and 1 metadata column: ## seqnames ranges strand | range_id ## &lt;Rle&gt; &lt;IRanges&gt; &lt;Rle&gt; | &lt;factor&gt; ## [1] chr1 34000001-34200000 + | foo ## [2] chr1 36000001-36200000 - | bar ## [3] chr1 36600001-36700000 - | boo ## ------- ## seqinfo: 1 sequence from an unspecified genome; no seqlengths In case you haven’t seen this before, GRanges objects have specific functions to pull out information. See ?GRanges for details. length(r) ## [1] 3 seqnames(r) ## factor-Rle of length 3 with 1 run ## Lengths: 3 ## Values : chr1 ## Levels(1): chr1 strand(r) ## factor-Rle of length 3 with 2 runs ## Lengths: 1 2 ## Values : + - ## Levels(3): + - * Let’s find which genes overlap a region of interest: library(EnsDb.Hsapiens.v86) g &lt;- genes(EnsDb.Hsapiens.v86) The following lines use convenience functions to convert to, e.g. \"chr1\", …, \"chrY\". library(GenomeInfoDb) g &lt;- keepStandardChromosomes(g, pruning.mode=&quot;coarse&quot;) seqlevelsStyle(g) &lt;- &quot;UCSC&quot; Now we are ready to test for overlaps. r %&gt;% join_overlap_left(g) ## GRanges object with 13 ranges and 7 metadata columns: ## seqnames ranges strand | range_id gene_id gene_name ## &lt;Rle&gt; &lt;IRanges&gt; &lt;Rle&gt; | &lt;factor&gt; &lt;character&gt; &lt;character&gt; ## [1] chr1 34000001-34200000 + | foo ENSG00000121904 CSMD2 ## [2] chr1 34000001-34200000 + | foo ENSG00000201148 RNA5SP42 ## [3] chr1 34000001-34200000 + | foo ENSG00000142698 C1orf94 ## [4] chr1 36000001-36200000 - | bar ENSG00000126070 AGO3 ## [5] chr1 36000001-36200000 - | bar ENSG00000271554 RP4-665N4.8 ## ... ... ... ... . ... ... ... ## [9] chr1 36000001-36200000 - | bar ENSG00000171812 COL8A2 ## [10] chr1 36000001-36200000 - | bar ENSG00000054116 TRAPPC3 ## [11] chr1 36000001-36200000 - | bar ENSG00000116871 MAP7D1 ## [12] chr1 36000001-36200000 - | bar ENSG00000264592 RN7SL131P ## [13] chr1 36600001-36700000 - | boo ENSG00000230214 FTLP18 ## gene_biotype seq_coord_system symbol entrezid ## &lt;character&gt; &lt;character&gt; &lt;character&gt; &lt;list&gt; ## [1] protein_coding chromosome CSMD2 114784 ## [2] rRNA chromosome RNA5SP42 &lt;NA&gt; ## [3] protein_coding chromosome C1orf94 84970 ## [4] protein_coding chromosome AGO3 192669 ## [5] antisense chromosome RP4-665N4.8 &lt;NA&gt; ## ... ... ... ... ... ## [9] protein_coding chromosome COL8A2 1296 ## [10] protein_coding chromosome TRAPPC3 27095 ## [11] protein_coding chromosome MAP7D1 55700 ## [12] misc_RNA chromosome RN7SL131P &lt;NA&gt; ## [13] processed_pseudogene chromosome FTLP18 &lt;NA&gt; ## ------- ## seqinfo: 1 sequence from an unspecified genome; no seqlengths We can also perform summarization by columns either in the gr or the g object: r %&gt;% join_overlap_left(g) %&gt;% group_by(range_id) %&gt;% summarize(count=n()) ## DataFrame with 3 rows and 2 columns ## range_id count ## &lt;factor&gt; &lt;integer&gt; ## 1 bar 9 ## 2 boo 1 ## 3 foo 3 This is giving us the same information as the following: r %&gt;% count_overlaps(g) ## [1] 3 9 1 If we want the gene ranges, we swap order of the ranges in the command: g %&gt;% join_overlap_inner(r) ## GRanges object with 13 ranges and 7 metadata columns: ## seqnames ranges strand | gene_id ## &lt;Rle&gt; &lt;IRanges&gt; &lt;Rle&gt; | &lt;character&gt; ## ENSG00000121904 chr1 33513999-34165842 - | ENSG00000121904 ## ENSG00000201148 chr1 34112949-34113063 + | ENSG00000201148 ## ENSG00000142698 chr1 34166883-34219131 + | ENSG00000142698 ## ENSG00000126070 chr1 35930718-36072500 + | ENSG00000126070 ## ENSG00000271554 chr1 35992109-36013630 - | ENSG00000271554 ## ... ... ... ... . ... ## ENSG00000171812 chr1 36095236-36125220 - | ENSG00000171812 ## ENSG00000054116 chr1 36136570-36156053 - | ENSG00000054116 ## ENSG00000116871 chr1 36155579-36180849 + | ENSG00000116871 ## ENSG00000264592 chr1 36191915-36192170 + | ENSG00000264592 ## ENSG00000230214 chr1 36630335-36630857 + | ENSG00000230214 ## gene_name gene_biotype seq_coord_system symbol ## &lt;character&gt; &lt;character&gt; &lt;character&gt; &lt;character&gt; ## ENSG00000121904 CSMD2 protein_coding chromosome CSMD2 ## ENSG00000201148 RNA5SP42 rRNA chromosome RNA5SP42 ## ENSG00000142698 C1orf94 protein_coding chromosome C1orf94 ## ENSG00000126070 AGO3 protein_coding chromosome AGO3 ## ENSG00000271554 RP4-665N4.8 antisense chromosome RP4-665N4.8 ## ... ... ... ... ... ## ENSG00000171812 COL8A2 protein_coding chromosome COL8A2 ## ENSG00000054116 TRAPPC3 protein_coding chromosome TRAPPC3 ## ENSG00000116871 MAP7D1 protein_coding chromosome MAP7D1 ## ENSG00000264592 RN7SL131P misc_RNA chromosome RN7SL131P ## ENSG00000230214 FTLP18 processed_pseudogene chromosome FTLP18 ## entrezid range_id ## &lt;list&gt; &lt;factor&gt; ## ENSG00000121904 114784 foo ## ENSG00000201148 &lt;NA&gt; foo ## ENSG00000142698 84970 foo ## ENSG00000126070 192669 bar ## ENSG00000271554 &lt;NA&gt; bar ## ... ... ... ## ENSG00000171812 1296 bar ## ENSG00000054116 27095 bar ## ENSG00000116871 55700 bar ## ENSG00000264592 &lt;NA&gt; bar ## ENSG00000230214 &lt;NA&gt; boo ## ------- ## seqinfo: 25 sequences from hg38 genome If we want strand specific overlaps, we can add _directed: g %&gt;% join_overlap_inner_directed(r) ## GRanges object with 6 ranges and 7 metadata columns: ## seqnames ranges strand | gene_id ## &lt;Rle&gt; &lt;IRanges&gt; &lt;Rle&gt; | &lt;character&gt; ## ENSG00000201148 chr1 34112949-34113063 + | ENSG00000201148 ## ENSG00000142698 chr1 34166883-34219131 + | ENSG00000142698 ## ENSG00000271554 chr1 35992109-36013630 - | ENSG00000271554 ## ENSG00000232862 chr1 36080066-36084026 - | ENSG00000232862 ## ENSG00000171812 chr1 36095236-36125220 - | ENSG00000171812 ## ENSG00000054116 chr1 36136570-36156053 - | ENSG00000054116 ## gene_name gene_biotype seq_coord_system ## &lt;character&gt; &lt;character&gt; &lt;character&gt; ## ENSG00000201148 RNA5SP42 rRNA chromosome ## ENSG00000142698 C1orf94 protein_coding chromosome ## ENSG00000271554 RP4-665N4.8 antisense chromosome ## ENSG00000232862 RP4-665N4.4 transcribed_processe.. chromosome ## ENSG00000171812 COL8A2 protein_coding chromosome ## ENSG00000054116 TRAPPC3 protein_coding chromosome ## symbol entrezid range_id ## &lt;character&gt; &lt;list&gt; &lt;factor&gt; ## ENSG00000201148 RNA5SP42 &lt;NA&gt; foo ## ENSG00000142698 C1orf94 84970 foo ## ENSG00000271554 RP4-665N4.8 &lt;NA&gt; bar ## ENSG00000232862 RP4-665N4.4 &lt;NA&gt; bar ## ENSG00000171812 COL8A2 1296 bar ## ENSG00000054116 TRAPPC3 27095 bar ## ------- ## seqinfo: 25 sequences from hg38 genome Now we can access, e.g. the genomic extent of the genes (first base to last base). g %&gt;% join_overlap_inner_directed(r) %&gt;% group_by(range_id) %&gt;% summarize(count=n(), mean_width=mean(width)) ## DataFrame with 2 rows and 3 columns ## range_id count mean_width ## &lt;factor&gt; &lt;integer&gt; &lt;numeric&gt; ## 1 bar 4 18738 ## 2 foo 2 26182 What about \"boo\"? We need to add a complete() call to account for the fact that we are missing those overlaps after the join. We need to call the function explicitly from the tidyr package but by not loading the package we can avoid some function name conflicts with plyranges. Also we need to convert to data.frame (explanation follows). g %&gt;% join_overlap_inner_directed(r) %&gt;% group_by(range_id) %&gt;% summarize(count=n(), mean_width=mean(width)) %&gt;% as.data.frame() %&gt;% tidyr::complete(range_id, fill=list(count=0)) ## # A tibble: 3 × 3 ## range_id count mean_width ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 bar 4 18738 ## 2 boo 0 NA ## 3 foo 2 26182 Why did we have to convert to data.frame before running complete()? This is because metadata columns of GRanges objects are in a format called DataFrame which the tidyr / dplyr functions don’t know how to operate on. To access these metadata columns, you can use any of these types of calls: mcols(r) ## DataFrame with 3 rows and 1 column ## range_id ## &lt;factor&gt; ## 1 foo ## 2 bar ## 3 boo mcols(r)$range_id ## [1] foo bar boo ## Levels: bar boo foo r$range_id # this works also ## [1] foo bar boo ## Levels: bar boo foo mcols(r)[[&quot;range_id&quot;]] # for programmatic access ## [1] foo bar boo ## Levels: bar boo foo "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
