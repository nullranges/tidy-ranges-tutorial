[["bootstrap-overlap.html", "Chapter 4 Bootstrap overlap", " Chapter 4 Bootstrap overlap Objective: determine if one set of peaks are overlapping another set of peaks more or less than expected when comparing to sets of null features. The null features can be generated in a variety of ways – here we will generate them by resampling large blocks of one of the peak sets. The motivation for sampling blocks, instead of placing features uniformly along the chromosome (“shuffling”), is to better preserve inter-feature distances, because genomic features tend to cluster in the genome, even after considering things like excluded regions. This technique of generating null feature sets is called block bootstrap resampling, and we will use the nullranges implementation of the block bootstrapping algorithm to generate the null features, followed by overlap analysis with plyranges. The approach used in nullranges to generate bootstrap ranges closely follows the method described by Bickel et al. (2010). We start by loading the kidney and bladder H3K27ac ChIP-seq peaks used in the previous analysis. library(AnnotationHub) ah &lt;- AnnotationHub() kidney_pks &lt;- ah[[&quot;AH43443&quot;]] bladder_pks &lt;- ah[[&quot;AH44180&quot;]] We will additionally obtain an excluded region set, so that we avoid placing bootstrap features into regions of the genome that don’t typically have features. A variety of possible exclude lists are provided by the excluderanges packages and available via AnnotationHub. Here we will use the hg19.Crawford.wgEncodeDukeMapabilityRegionsExcludable regions, as they are available for hg19, which is the genome used with the peak sets. # query(ah, c(&quot;excluderanges&quot;,&quot;hg19&quot;)) exclude &lt;- ah[[&quot;AH95912&quot;]] To make the code more generic, we will rename the kidney peaks to x and the bladder peaks to y. We will be looking for overlaps with features in x as the query set: how many of the features in x overlap features in y? The following code reduces our analysis to looking only at standard chromosomes, excluding the mitochondrial genome (too small for including in the block bootstrap). library(GenomeInfoDb) x &lt;- kidney_pks y &lt;- bladder_pks x &lt;- keepStandardChromosomes(x) seqlevels(x, pruning.mode=&quot;coarse&quot;) &lt;- setdiff(seqlevels(x), &quot;chrM&quot;) seqlevels(y, pruning.mode=&quot;coarse&quot;) &lt;- seqlevels(x) seqlevels(exclude, pruning.mode=&quot;coarse&quot;) &lt;- seqlevels(x) We are mostly concerned with avoiding placing bootstrapped features in large regions in the exclude list, so we subset the exclude list to features larger than 500 bp. library(plyranges) exclude &lt;- exclude %&gt;% filter(width(exclude) &gt;= 500) We also subset to the peaks for kidney and bladder which have q-value less than 0.001 and signal value greater than 9 (these are arbitrary filter values, just for demonstration). For further analysis, we will need the features in y to be sorted, for the bootstrapping, here we sort both sets. q_thr &lt;- 3 s_thr &lt;- 9 x &lt;- x %&gt;% filter(qValue &gt; q_thr &amp; signalValue &gt; s_thr) %&gt;% sort() y &lt;- y %&gt;% filter(qValue &gt; q_thr &amp; signalValue &gt; s_thr) %&gt;% sort() Now we can assess how many overlaps we observed between x and y: obs &lt;- x %&gt;% mutate(n_overlaps = count_overlaps(., y)) obs %&gt;% summarize(total = sum(n_overlaps)) ## DataFrame with 1 row and 1 column ## total ## &lt;integer&gt; ## 1 5073 table( obs$n_overlaps ) ## ## 0 1 2 3 4 6 ## 9453 3966 486 39 3 1 We can check if any of the features of y fall in the excluded regions: y %&gt;% mutate(n_overlaps = count_overlaps(., exclude)) %&gt;% summarize(total = sum(n_overlaps)) ## DataFrame with 1 row and 1 column ## total ## &lt;integer&gt; ## 1 0 The following chunk of code does the bootstrapping of features in y. Here we subset first to metadata columns of interest (an id variable that we create, and the signal value which we rename to signal). pks_to_boot &lt;- y %&gt;% mutate(id = seq_along(y)) %&gt;% select(id, signal = signalValue) The bootRanges function returns the 100 bootstrap feature sets combined into one GRanges object – this tidy format facilitates downstream analysis as we will see. The bootstrap iteration is stored in the iter metadata column. library(nullranges) R &lt;- 100 # number of iterations set.seed(5) # set seed for reproducibility boots &lt;- bootRanges(pks_to_boot, blockLength=5e5, R=R, exclude=exclude) boots ## bootRanges object with 582286 ranges and 5 metadata columns: ## seqnames ranges strand | id signal block ## &lt;Rle&gt; &lt;IRanges&gt; &lt;Rle&gt; | &lt;integer&gt; &lt;numeric&gt; &lt;integer&gt; ## [1] chr1 2011397-2011809 * | 931 14.42934 5 ## [2] chr1 2011973-2012399 * | 932 17.57052 5 ## [3] chr1 2012505-2013073 * | 933 9.64691 5 ## [4] chr1 2503670-2505748 * | 3752 20.84181 6 ## [5] chr1 2505855-2507134 * | 3753 15.29241 6 ## ... ... ... ... . ... ... ... ## [582282] chrY 55017962-55019381 * | 4606 10.6726 6198 ## [582283] chrY 55020728-55021448 * | 4607 10.2813 6198 ## [582284] chrY 56057780-56058485 * | 526 10.7459 6200 ## [582285] chrY 58301237-58301561 * | 2909 13.6510 6204 ## [582286] chrY 58469665-58470750 * | 2910 16.2352 6204 ## iter blockLength ## &lt;Rle&gt; &lt;Rle&gt; ## [1] 1 500000 ## [2] 1 500000 ## [3] 1 500000 ## [4] 1 500000 ## [5] 1 500000 ## ... ... ... ## [582282] 100 500000 ## [582283] 100 500000 ## [582284] 100 500000 ## [582285] 100 500000 ## [582286] 100 500000 ## ------- ## seqinfo: 24 sequences from hg19 genome The default use above of the exclude argument is to drop bootstrapped ranges that overlap the exclude list. We can examine properties of permuted y over iterations, and compare to the original y. To do so, we first add the original features as iter=0. combined &lt;- pks_to_boot %&gt;% mutate(iter=0) %&gt;% bind_ranges(boots) %&gt;% select(iter) Then compute summaries: stats &lt;- combined %&gt;% group_by(iter) %&gt;% summarize(n = n(), sum_width=sum(width)/1e6) %&gt;% as.data.frame() Original y vs bootstrap: stats[1,] ## iter n sum_width ## 1 0 5838 5.068015 summary(stats[-1,]) ## iter n sum_width ## 1 : 1 Min. :5586 Min. :4.778 ## 2 : 1 1st Qu.:5727 1st Qu.:4.966 ## 3 : 1 Median :5814 Median :5.065 ## 4 : 1 Mean :5823 Mean :5.055 ## 5 : 1 3rd Qu.:5911 3rd Qu.:5.131 ## 6 : 1 Max. :6180 Max. :5.375 ## (Other):94 We can also look at distributions of various aspects, e.g. here the width of features, across a few of the bootstraps and the original feature set y. library(ggplot2) library(ggridges) combined %&gt;% filter(iter %in% 0:5) %&gt;% select(iter) %&gt;% as.data.frame() %&gt;% mutate(type = ifelse(iter == 0, &quot;original&quot;, &quot;boot&quot;)) %&gt;% ggplot(aes(log10(width), iter, fill=type)) + geom_density_ridges(alpha = 0.75) + geom_text(data=head(stats), aes(x=2.25, y=iter, label=paste0(&quot;n=&quot;,n), fill=NULL), vjust=1.5) To compute overlap with the null features, we need the complete() function from the tidyr package. We saw complete() before – this is used in the case that one of the iterations has no overlaps. In this case, we need to record the 0 value for proper inference and plots downstream. It is rare we would have no overlaps with so many features as we have in x and y but it’s good practice to leave the complete() as part of the workflow so the code works correctly in all cases. The overlap per iteration of the bootstrap is accomplished by a series of plyranges / dplyr commands (we switch to dplyr halfway through, after the as.data.frame() call). library(tidyr) null &lt;- x %&gt;% join_overlap_inner(boots) %&gt;% group_by(iter) %&gt;% summarize(n_overlaps = n()) %&gt;% as.data.frame() %&gt;% complete(iter, fill=list(n_overlaps = 0)) head(null) ## # A tibble: 6 × 2 ## iter n_overlaps ## &lt;fct&gt; &lt;dbl&gt; ## 1 1 60 ## 2 2 60 ## 3 3 76 ## 4 4 51 ## 5 5 39 ## 6 6 66 sum( obs$n_overlaps ) ## [1] 5073 The observed number of overlaps is about two orders of magnitude more than the bootstrapped number, which makes sense as two tissues would be expected to share a number of similar regulatory regions (as marked by H3K27ac) – more so than randomly placed genomic features, even after accounting for excluded regions and feature clustering. ggplot(null, aes(n_overlaps)) + geom_histogram(binwidth=5) + ggtitle(&quot;bootstrap overlaps&quot;) What could be improved with this analysis? Note that in the above chunks where we count overlaps, we are doubly (or triply, etc.) counting features in x if they hit more than one feature in y or boots. We can count statistics per x feature by adding another group_by into the stream of operations. This also allows us to do more complex operations, such as computing the maximum signal value for the overlapping features in y per feature in x: First add an ID variable to keep track of x features: x &lt;- x %&gt;% mutate(x_id = seq_along(x)) Then perform an inner join, and group by the new x ID: obs &lt;- x %&gt;% join_overlap_inner(pks_to_boot) %&gt;% group_by(x_id) %&gt;% summarize(num_overlaps = n(), max_signal = max(signal)) sum( obs$num_overlaps &gt; 0 ) ## [1] 4495 summary( obs$max_signal ) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 9.002 10.281 12.025 13.029 14.725 35.211 For the bootstrap ranges overlap step, we also need to add iter to the initial group_by, so we count per x feature and per iteration of the bootstrap: null &lt;- x %&gt;% join_overlap_inner(boots) %&gt;% group_by(x_id, iter) %&gt;% summarize(num_overlaps = n()) %&gt;% as.data.frame() %&gt;% group_by(iter) %&gt;% summarize(any_hits = sum(num_overlaps &gt; 0)) %&gt;% complete(iter, fill=list(any_hits = 0)) head(null) ## # A tibble: 6 × 2 ## iter any_hits ## &lt;fct&gt; &lt;dbl&gt; ## 1 1 55 ## 2 2 55 ## 3 3 68 ## 4 4 50 ## 5 5 37 ## 6 6 63 Still, we are seeing much more overlap in the observed data than in the bootstrap data: sum( obs$num_overlaps &gt; 0 ) / mean(null$any_hits) ## [1] 76.7851 The above code chunk then avoids double counting. We could also have made other per-x-feature statistics in the summarize step after the initial group_by, such as maximum signal of overlapping features. What other ways could we have done this analysis? Suppose we don’t just want the count of overlaps, but the rate of overlaps from the y perspective, keeping track of the variable number of features per bootstrap. We demonstrate one approach to obtain this rate for the bootstraps: x_thin &lt;- x %&gt;% select(x_id) null &lt;- boots %&gt;% select(id, iter) %&gt;% join_overlap_inner(x_thin) %&gt;% group_by(id, iter) %&gt;% summarize(num_overlaps = n()) %&gt;% as.data.frame() %&gt;% group_by(iter) %&gt;% summarize(any_hits = sum(num_overlaps &gt; 0)) %&gt;% complete(iter, fill=list(any_hits = 0)) Now combine with the per-iteration total count: totals &lt;- boots %&gt;% group_by(iter) %&gt;% summarize(total=n()) %&gt;% as.data.frame() null %&gt;% dplyr::left_join(totals) %&gt;% mutate(rate = any_hits/total) ## Joining, by = &quot;iter&quot; ## # A tibble: 100 × 4 ## iter any_hits total rate ## &lt;fct&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; ## 1 1 59 6031 0.00978 ## 2 2 58 5710 0.0102 ## 3 3 73 5758 0.0127 ## 4 4 50 5927 0.00844 ## 5 5 37 5713 0.00648 ## 6 6 59 5888 0.0100 ## 7 7 58 5910 0.00981 ## 8 8 79 5836 0.0135 ## 9 9 59 5770 0.0102 ## 10 10 50 5991 0.00835 ## # … with 90 more rows References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
